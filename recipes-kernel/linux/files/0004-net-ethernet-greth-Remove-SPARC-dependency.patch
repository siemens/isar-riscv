From 2680a7455949c7c216b0a5af84722ed852abe6f2 Mon Sep 17 00:00:00 2001
From: Daniel Cederman <cederman@gaisler.com>
Date: Mon, 3 May 2021 12:48:19 +0200
Subject: [PATCH 4/6] net: ethernet: greth: Remove SPARC dependency

Use platform_get_irq() instead of accessing archdata.
Use devm_ioremap_resource() instead of of_ioremap().
Remove big-endian conversion. When using the GRETH on a little-endian
system the registers and descriptors does not need to be big-endian.
Add .compatible string for matching.

Signed-off-by: Daniel Cederman <cederman@gaisler.com>
---
 drivers/net/ethernet/aeroflex/Kconfig |  2 +-
 drivers/net/ethernet/aeroflex/greth.c | 34 ++++++++++++---------------
 2 files changed, 16 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/aeroflex/Kconfig b/drivers/net/ethernet/aeroflex/Kconfig
index ea4be67f787b..afef6bce9845 100644
--- a/drivers/net/ethernet/aeroflex/Kconfig
+++ b/drivers/net/ethernet/aeroflex/Kconfig
@@ -5,7 +5,7 @@
 
 config GRETH
 	tristate "Aeroflex Gaisler GRETH Ethernet MAC support"
-	depends on SPARC
+	depends on OF
 	select PHYLIB
 	select CRC32
 	help
diff --git a/drivers/net/ethernet/aeroflex/greth.c b/drivers/net/ethernet/aeroflex/greth.c
index d77fafbc1530..1b819cc32401 100644
--- a/drivers/net/ethernet/aeroflex/greth.c
+++ b/drivers/net/ethernet/aeroflex/greth.c
@@ -78,8 +78,8 @@ static int greth_close(struct net_device *dev);
 static int greth_set_mac_add(struct net_device *dev, void *p);
 static void greth_set_multicast_list(struct net_device *dev);
 
-#define GRETH_REGLOAD(a)	    (be32_to_cpu(__raw_readl(&(a))))
-#define GRETH_REGSAVE(a, v)         (__raw_writel(cpu_to_be32(v), &(a)))
+#define GRETH_REGLOAD(a)	    (__raw_readl(&(a)))
+#define GRETH_REGSAVE(a, v)         (__raw_writel(v, &(a)))
 #define GRETH_REGORIN(a, v)         (GRETH_REGSAVE(a, (GRETH_REGLOAD(a) | (v))))
 #define GRETH_REGANDIN(a, v)        (GRETH_REGSAVE(a, (GRETH_REGLOAD(a) & (v))))
 
@@ -154,12 +154,12 @@ static inline void greth_disable_irqs(struct greth_private *greth)
 
 static inline void greth_write_bd(u32 *bd, u32 val)
 {
-	__raw_writel(cpu_to_be32(val), bd);
+	__raw_writel(val, bd);
 }
 
 static inline u32 greth_read_bd(u32 *bd)
 {
-	return be32_to_cpu(__raw_readl(bd));
+	return __raw_readl(bd);
 }
 
 static void greth_clean_rings(struct greth_private *greth)
@@ -1342,6 +1342,7 @@ static int greth_of_probe(struct platform_device *ofdev)
 	struct net_device *dev;
 	struct greth_private *greth;
 	struct greth_regs *regs;
+	struct resource *res;
 
 	int i;
 	int err;
@@ -1364,19 +1365,15 @@ static int greth_of_probe(struct platform_device *ofdev)
 
 	spin_lock_init(&greth->devlock);
 
-	greth->regs = of_ioremap(&ofdev->resource[0], 0,
-				 resource_size(&ofdev->resource[0]),
-				 "grlib-greth regs");
-
-	if (greth->regs == NULL) {
-		if (netif_msg_probe(greth))
-			dev_err(greth->dev, "ioremap failure.\n");
-		err = -EIO;
+	res = platform_get_resource(ofdev, IORESOURCE_MEM, 0);
+	greth->regs = devm_ioremap_resource(&ofdev->dev, res);
+	if (IS_ERR(greth->regs)) {
+		err = PTR_ERR(greth->regs);
 		goto error1;
 	}
 
 	regs = greth->regs;
-	greth->irq = ofdev->archdata.irqs[0];
+	greth->irq = platform_get_irq(ofdev, 0);
 
 	dev_set_drvdata(greth->dev, dev);
 	SET_NETDEV_DEV(dev, greth->dev);
@@ -1394,7 +1391,7 @@ static int greth_of_probe(struct platform_device *ofdev)
 			err = -EIO;
 			if (netif_msg_probe(greth))
 				dev_err(greth->dev, "timeout when waiting for reset.\n");
-			goto error2;
+			goto error1;
 		}
 	}
 
@@ -1422,7 +1419,7 @@ static int greth_of_probe(struct platform_device *ofdev)
 	if (err) {
 		if (netif_msg_probe(greth))
 			dev_err(greth->dev, "failed to register MDIO bus\n");
-		goto error2;
+		goto error1;
 	}
 
 	/* Allocate TX descriptor ring in coherent memory */
@@ -1517,8 +1514,6 @@ static int greth_of_probe(struct platform_device *ofdev)
 	dma_free_coherent(greth->dev, 1024, greth->tx_bd_base, greth->tx_bd_base_phys);
 error3:
 	mdiobus_unregister(greth->mdio);
-error2:
-	of_iounmap(&ofdev->resource[0], greth->regs, resource_size(&ofdev->resource[0]));
 error1:
 	free_netdev(dev);
 	return err;
@@ -1541,8 +1536,6 @@ static int greth_of_remove(struct platform_device *of_dev)
 	unregister_netdev(ndev);
 	free_netdev(ndev);
 
-	of_iounmap(&of_dev->resource[0], greth->regs, resource_size(&of_dev->resource[0]));
-
 	return 0;
 }
 
@@ -1553,6 +1546,9 @@ static const struct of_device_id greth_of_match[] = {
 	{
 	 .name = "01_01d",
 	 },
+	{
+	 .compatible = "gaisler,greth",
+	 },
 	{},
 };
 
-- 
2.25.1

